001 { Sample Pascal Program. }
    ^
*** Invalid character [at "{"]
>>> IDENTIFIER      line=001, pos= 2, text="Sample"
>>> IDENTIFIER      line=001, pos= 9, text="Pascal"
>>> PROGRAM         line=001, pos=16, text="Program"
>>> DOT             line=001, pos=23, text="."
>>> RIGHT_BRACE     line=001, pos=25, text="}"
002 { R. Mak }
>>> LEFT_BRACE      line=002, pos= 0, text="{"
>>> IDENTIFIER      line=002, pos= 2, text="R"
>>> DOT             line=002, pos= 3, text="."
>>> IDENTIFIER      line=002, pos= 5, text="Mak"
>>> RIGHT_BRACE     line=002, pos= 9, text="}"
003 
004 PROGRAM EmployeeListing(input, output);
>>> PROGRAM         line=004, pos= 0, text="PROGRAM"
>>> IDENTIFIER      line=004, pos= 8, text="EmployeeListing"
>>> LEFT_PAREN      line=004, pos=23, text="("
>>> IDENTIFIER      line=004, pos=24, text="input"
>>> COMMA           line=004, pos=29, text=","
>>> IDENTIFIER      line=004, pos=31, text="output"
>>> RIGHT_PAREN     line=004, pos=37, text=")"
>>> SEMICOLON       line=004, pos=38, text=";"
005 
006 CONST
>>> CONST           line=006, pos= 0, text="CONST"
007     MAX_EMPLOYEES   = 100;
>>> IDENTIFIER      line=007, pos= 4, text="MAX"
           ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=007, pos= 8, text="EMPLOYEES"
>>> EQUALS          line=007, pos=20, text="="
>>> INTEGER         line=007, pos=22, text="100"
>>>                 value=100
>>> SEMICOLON       line=007, pos=25, text=";"
008     MAX_NAME_LENGTH = 10;
>>> IDENTIFIER      line=008, pos= 4, text="MAX"
           ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=008, pos= 8, text="NAME"
                ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=008, pos=13, text="LENGTH"
>>> EQUALS          line=008, pos=20, text="="
>>> INTEGER         line=008, pos=22, text="10"
>>>                 value=10
>>> SEMICOLON       line=008, pos=24, text=";"
009     FIELD_SEPARATOR = ':';
>>> IDENTIFIER      line=009, pos= 4, text="FIELD"
             ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=009, pos=10, text="SEPARATOR"
>>> EQUALS          line=009, pos=20, text="="
>>> QUOTE           line=009, pos=22, text="'"
>>> COLON           line=009, pos=23, text=":"
>>> QUOTE           line=009, pos=24, text="'"
>>> SEMICOLON       line=009, pos=25, text=";"
010 
011 TYPE
>>> TYPE            line=011, pos= 0, text="TYPE"
012     nameString = PACKED ARRAY [1..MAX_NAME_LENGTH] OF char;
>>> IDENTIFIER      line=012, pos= 4, text="nameString"
>>> EQUALS          line=012, pos=15, text="="
>>> PACKED          line=012, pos=17, text="PACKED"
>>> ARRAY           line=012, pos=24, text="ARRAY"
>>> LEFT_BRACKET    line=012, pos=30, text="["
>>> INTEGER         line=012, pos=31, text="1"
>>>                 value=1
>>> DOT_DOT         line=012, pos=32, text=".."
>>> IDENTIFIER      line=012, pos=34, text="MAX"
                                         ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=012, pos=38, text="NAME"
                                              ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=012, pos=43, text="LENGTH"
>>> RIGHT_BRACKET   line=012, pos=49, text="]"
>>> OF              line=012, pos=51, text="OF"
>>> IDENTIFIER      line=012, pos=54, text="char"
>>> SEMICOLON       line=012, pos=58, text=";"
013     codeChar = 'A'..'Z';
>>> IDENTIFIER      line=013, pos= 4, text="codeChar"
>>> EQUALS          line=013, pos=13, text="="
>>> QUOTE           line=013, pos=15, text="'"
>>> IDENTIFIER      line=013, pos=16, text="A"
>>> QUOTE           line=013, pos=17, text="'"
>>> DOT_DOT         line=013, pos=18, text=".."
>>> QUOTE           line=013, pos=20, text="'"
>>> IDENTIFIER      line=013, pos=21, text="Z"
>>> QUOTE           line=013, pos=22, text="'"
>>> SEMICOLON       line=013, pos=23, text=";"
014     codeSet = SET OF codeChar;
>>> IDENTIFIER      line=014, pos= 4, text="codeSet"
>>> EQUALS          line=014, pos=12, text="="
>>> SET             line=014, pos=14, text="SET"
>>> OF              line=014, pos=18, text="OF"
>>> IDENTIFIER      line=014, pos=21, text="codeChar"
>>> SEMICOLON       line=014, pos=29, text=";"
015     professionEnum = (SCIENTIST, TEACHER, UNKNOWN);
>>> IDENTIFIER      line=015, pos= 4, text="professionEnum"
>>> EQUALS          line=015, pos=19, text="="
>>> LEFT_PAREN      line=015, pos=21, text="("
>>> IDENTIFIER      line=015, pos=22, text="SCIENTIST"
>>> COMMA           line=015, pos=31, text=","
>>> IDENTIFIER      line=015, pos=33, text="TEACHER"
>>> COMMA           line=015, pos=40, text=","
>>> IDENTIFIER      line=015, pos=42, text="UNKNOWN"
>>> RIGHT_PAREN     line=015, pos=49, text=")"
>>> SEMICOLON       line=015, pos=50, text=";"
016 
017     employeeRec = RECORD
>>> IDENTIFIER      line=017, pos= 4, text="employeeRec"
>>> EQUALS          line=017, pos=16, text="="
>>> RECORD          line=017, pos=18, text="RECORD"
018                       id : integer;
>>> IDENTIFIER      line=018, pos=22, text="id"
>>> COLON           line=018, pos=25, text=":"
>>> IDENTIFIER      line=018, pos=27, text="integer"
>>> SEMICOLON       line=018, pos=34, text=";"
019                       jobCode : codeChar;
>>> IDENTIFIER      line=019, pos=22, text="jobCode"
>>> COLON           line=019, pos=30, text=":"
>>> IDENTIFIER      line=019, pos=32, text="codeChar"
>>> SEMICOLON       line=019, pos=40, text=";"
020                       lastName : nameString;
>>> IDENTIFIER      line=020, pos=22, text="lastName"
>>> COLON           line=020, pos=31, text=":"
>>> IDENTIFIER      line=020, pos=33, text="nameString"
>>> SEMICOLON       line=020, pos=43, text=";"
021                       firstName : nameString;
>>> IDENTIFIER      line=021, pos=22, text="firstName"
>>> COLON           line=021, pos=32, text=":"
>>> IDENTIFIER      line=021, pos=34, text="nameString"
>>> SEMICOLON       line=021, pos=44, text=";"
022                       profession : professionEnum;
>>> IDENTIFIER      line=022, pos=22, text="profession"
>>> COLON           line=022, pos=33, text=":"
>>> IDENTIFIER      line=022, pos=35, text="professionEnum"
>>> SEMICOLON       line=022, pos=49, text=";"
023                   END;
>>> END             line=023, pos=18, text="END"
>>> SEMICOLON       line=023, pos=21, text=";"
024 
025 VAR
>>> VAR             line=025, pos= 0, text="VAR"
026     employeeCount : integer;
>>> IDENTIFIER      line=026, pos= 4, text="employeeCount"
>>> COLON           line=026, pos=18, text=":"
>>> IDENTIFIER      line=026, pos=20, text="integer"
>>> SEMICOLON       line=026, pos=27, text=";"
027     employees : ARRAY [1..MAX_EMPLOYEES] OF employeeRec;
>>> IDENTIFIER      line=027, pos= 4, text="employees"
>>> COLON           line=027, pos=14, text=":"
>>> ARRAY           line=027, pos=16, text="ARRAY"
>>> LEFT_BRACKET    line=027, pos=22, text="["
>>> INTEGER         line=027, pos=23, text="1"
>>>                 value=1
>>> DOT_DOT         line=027, pos=24, text=".."
>>> IDENTIFIER      line=027, pos=26, text="MAX"
                                 ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=027, pos=30, text="EMPLOYEES"
>>> RIGHT_BRACKET   line=027, pos=39, text="]"
>>> OF              line=027, pos=41, text="OF"
>>> IDENTIFIER      line=027, pos=44, text="employeeRec"
>>> SEMICOLON       line=027, pos=55, text=";"
028     scientistCodes, teacherCodes : codeSet;  {initialized in main}
>>> IDENTIFIER      line=028, pos= 4, text="scientistCodes"
>>> COMMA           line=028, pos=18, text=","
>>> IDENTIFIER      line=028, pos=20, text="teacherCodes"
>>> COLON           line=028, pos=33, text=":"
>>> IDENTIFIER      line=028, pos=35, text="codeSet"
>>> SEMICOLON       line=028, pos=42, text=";"
>>> LEFT_BRACE      line=028, pos=45, text="{"
>>> IDENTIFIER      line=028, pos=46, text="initialized"
>>> IN              line=028, pos=58, text="in"
>>> IDENTIFIER      line=028, pos=61, text="main"
>>> RIGHT_BRACE     line=028, pos=65, text="}"
029 
030 {Read the employee ID and return its integer value.}
>>> LEFT_BRACE      line=030, pos= 0, text="{"
>>> IDENTIFIER      line=030, pos= 1, text="Read"
>>> IDENTIFIER      line=030, pos= 6, text="the"
>>> IDENTIFIER      line=030, pos=10, text="employee"
>>> IDENTIFIER      line=030, pos=19, text="ID"
>>> AND             line=030, pos=22, text="and"
>>> IDENTIFIER      line=030, pos=26, text="return"
>>> IDENTIFIER      line=030, pos=33, text="its"
>>> IDENTIFIER      line=030, pos=37, text="integer"
>>> IDENTIFIER      line=030, pos=45, text="value"
>>> DOT             line=030, pos=50, text="."
>>> RIGHT_BRACE     line=030, pos=51, text="}"
031 FUNCTION readId : integer;
>>> FUNCTION        line=031, pos= 0, text="FUNCTION"
>>> IDENTIFIER      line=031, pos= 9, text="readId"
>>> COLON           line=031, pos=16, text=":"
>>> IDENTIFIER      line=031, pos=18, text="integer"
>>> SEMICOLON       line=031, pos=25, text=";"
032 
033     VAR
>>> VAR             line=033, pos= 4, text="VAR"
034         id : integer;
>>> IDENTIFIER      line=034, pos= 8, text="id"
>>> COLON           line=034, pos=11, text=":"
>>> IDENTIFIER      line=034, pos=13, text="integer"
>>> SEMICOLON       line=034, pos=20, text=";"
035         ch : char;
>>> IDENTIFIER      line=035, pos= 8, text="ch"
>>> COLON           line=035, pos=11, text=":"
>>> IDENTIFIER      line=035, pos=13, text="char"
>>> SEMICOLON       line=035, pos=17, text=";"
036 
037     BEGIN
>>> BEGIN           line=037, pos= 4, text="BEGIN"
038         id := 0;
>>> IDENTIFIER      line=038, pos= 8, text="id"
>>> COLON_EQUALS    line=038, pos=11, text=":="
>>> INTEGER         line=038, pos=14, text="0"
>>>                 value=0
>>> SEMICOLON       line=038, pos=15, text=";"
039 
040         {Read the ID digits until the field separator.}
>>> LEFT_BRACE      line=040, pos= 8, text="{"
>>> IDENTIFIER      line=040, pos= 9, text="Read"
>>> IDENTIFIER      line=040, pos=14, text="the"
>>> IDENTIFIER      line=040, pos=18, text="ID"
>>> IDENTIFIER      line=040, pos=21, text="digits"
>>> UNTIL           line=040, pos=28, text="until"
>>> IDENTIFIER      line=040, pos=34, text="the"
>>> IDENTIFIER      line=040, pos=38, text="field"
>>> IDENTIFIER      line=040, pos=44, text="separator"
>>> DOT             line=040, pos=53, text="."
>>> RIGHT_BRACE     line=040, pos=54, text="}"
041         REPEAT
>>> REPEAT          line=041, pos= 8, text="REPEAT"
042             read(ch);  {ID digit}
>>> IDENTIFIER      line=042, pos=12, text="read"
>>> LEFT_PAREN      line=042, pos=16, text="("
>>> IDENTIFIER      line=042, pos=17, text="ch"
>>> RIGHT_PAREN     line=042, pos=19, text=")"
>>> SEMICOLON       line=042, pos=20, text=";"
>>> LEFT_BRACE      line=042, pos=23, text="{"
>>> IDENTIFIER      line=042, pos=24, text="ID"
>>> IDENTIFIER      line=042, pos=27, text="digit"
>>> RIGHT_BRACE     line=042, pos=32, text="}"
043 
044             {Compute the integer value.}
>>> LEFT_BRACE      line=044, pos=12, text="{"
>>> IDENTIFIER      line=044, pos=13, text="Compute"
>>> IDENTIFIER      line=044, pos=21, text="the"
>>> IDENTIFIER      line=044, pos=25, text="integer"
>>> IDENTIFIER      line=044, pos=33, text="value"
>>> DOT             line=044, pos=38, text="."
>>> RIGHT_BRACE     line=044, pos=39, text="}"
045             if (ch <> FIELD_SEPARATOR) THEN BEGIN
>>> IF              line=045, pos=12, text="if"
>>> LEFT_PAREN      line=045, pos=15, text="("
>>> IDENTIFIER      line=045, pos=16, text="ch"
>>> NOT_EQUALS      line=045, pos=19, text="<>"
>>> IDENTIFIER      line=045, pos=22, text="FIELD"
                               ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=045, pos=28, text="SEPARATOR"
>>> RIGHT_PAREN     line=045, pos=37, text=")"
>>> THEN            line=045, pos=39, text="THEN"
>>> BEGIN           line=045, pos=44, text="BEGIN"
046                 id := 10*id + (ord(ch) - ord('0'));
>>> IDENTIFIER      line=046, pos=16, text="id"
>>> COLON_EQUALS    line=046, pos=19, text=":="
>>> INTEGER         line=046, pos=22, text="10"
>>>                 value=10
>>> STAR            line=046, pos=24, text="*"
>>> IDENTIFIER      line=046, pos=25, text="id"
>>> PLUS            line=046, pos=28, text="+"
>>> LEFT_PAREN      line=046, pos=30, text="("
>>> IDENTIFIER      line=046, pos=31, text="ord"
>>> LEFT_PAREN      line=046, pos=34, text="("
>>> IDENTIFIER      line=046, pos=35, text="ch"
>>> RIGHT_PAREN     line=046, pos=37, text=")"
>>> MINUS           line=046, pos=39, text="-"
>>> IDENTIFIER      line=046, pos=41, text="ord"
>>> LEFT_PAREN      line=046, pos=44, text="("
>>> QUOTE           line=046, pos=45, text="'"
>>> INTEGER         line=046, pos=46, text="0"
>>>                 value=0
>>> QUOTE           line=046, pos=47, text="'"
>>> RIGHT_PAREN     line=046, pos=48, text=")"
>>> RIGHT_PAREN     line=046, pos=49, text=")"
>>> SEMICOLON       line=046, pos=50, text=";"
047             END;
>>> END             line=047, pos=12, text="END"
>>> SEMICOLON       line=047, pos=15, text=";"
048         UNTIL ch = FIELD_SEPARATOR;
>>> UNTIL           line=048, pos= 8, text="UNTIL"
>>> IDENTIFIER      line=048, pos=14, text="ch"
>>> EQUALS          line=048, pos=17, text="="
>>> IDENTIFIER      line=048, pos=19, text="FIELD"
                            ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=048, pos=25, text="SEPARATOR"
>>> SEMICOLON       line=048, pos=34, text=";"
049         readId := id;
>>> IDENTIFIER      line=049, pos= 8, text="readId"
>>> COLON_EQUALS    line=049, pos=15, text=":="
>>> IDENTIFIER      line=049, pos=18, text="id"
>>> SEMICOLON       line=049, pos=20, text=";"
050     END;
>>> END             line=050, pos= 4, text="END"
>>> SEMICOLON       line=050, pos= 7, text=";"
051 
052 {Read and return the job code.}
>>> LEFT_BRACE      line=052, pos= 0, text="{"
>>> IDENTIFIER      line=052, pos= 1, text="Read"
>>> AND             line=052, pos= 6, text="and"
>>> IDENTIFIER      line=052, pos=10, text="return"
>>> IDENTIFIER      line=052, pos=17, text="the"
>>> IDENTIFIER      line=052, pos=21, text="job"
>>> IDENTIFIER      line=052, pos=25, text="code"
>>> DOT             line=052, pos=29, text="."
>>> RIGHT_BRACE     line=052, pos=30, text="}"
053 FUNCTION readJobCode : codeChar;
>>> FUNCTION        line=053, pos= 0, text="FUNCTION"
>>> IDENTIFIER      line=053, pos= 9, text="readJobCode"
>>> COLON           line=053, pos=21, text=":"
>>> IDENTIFIER      line=053, pos=23, text="codeChar"
>>> SEMICOLON       line=053, pos=31, text=";"
054 
055     VAR
>>> VAR             line=055, pos= 4, text="VAR"
056         ch : char;
>>> IDENTIFIER      line=056, pos= 8, text="ch"
>>> COLON           line=056, pos=11, text=":"
>>> IDENTIFIER      line=056, pos=13, text="char"
>>> SEMICOLON       line=056, pos=17, text=";"
057 
058     BEGIN
>>> BEGIN           line=058, pos= 4, text="BEGIN"
059         read(ch);  {job code}
>>> IDENTIFIER      line=059, pos= 8, text="read"
>>> LEFT_PAREN      line=059, pos=12, text="("
>>> IDENTIFIER      line=059, pos=13, text="ch"
>>> RIGHT_PAREN     line=059, pos=15, text=")"
>>> SEMICOLON       line=059, pos=16, text=";"
>>> LEFT_BRACE      line=059, pos=19, text="{"
>>> IDENTIFIER      line=059, pos=20, text="job"
>>> IDENTIFIER      line=059, pos=24, text="code"
>>> RIGHT_BRACE     line=059, pos=28, text="}"
060         readJobCode := ch;
>>> IDENTIFIER      line=060, pos= 8, text="readJobCode"
>>> COLON_EQUALS    line=060, pos=20, text=":="
>>> IDENTIFIER      line=060, pos=23, text="ch"
>>> SEMICOLON       line=060, pos=25, text=";"
061 
062         read(ch);  {skip over the field separator}
>>> IDENTIFIER      line=062, pos= 8, text="read"
>>> LEFT_PAREN      line=062, pos=12, text="("
>>> IDENTIFIER      line=062, pos=13, text="ch"
>>> RIGHT_PAREN     line=062, pos=15, text=")"
>>> SEMICOLON       line=062, pos=16, text=";"
>>> LEFT_BRACE      line=062, pos=19, text="{"
>>> IDENTIFIER      line=062, pos=20, text="skip"
>>> IDENTIFIER      line=062, pos=25, text="over"
>>> IDENTIFIER      line=062, pos=30, text="the"
>>> IDENTIFIER      line=062, pos=34, text="field"
>>> IDENTIFIER      line=062, pos=40, text="separator"
>>> RIGHT_BRACE     line=062, pos=49, text="}"
063     END;
>>> END             line=063, pos= 4, text="END"
>>> SEMICOLON       line=063, pos= 7, text=";"
064 
065 {Read a first or last name and return it by reference.}
>>> LEFT_BRACE      line=065, pos= 0, text="{"
>>> IDENTIFIER      line=065, pos= 1, text="Read"
>>> IDENTIFIER      line=065, pos= 6, text="a"
>>> IDENTIFIER      line=065, pos= 8, text="first"
>>> OR              line=065, pos=14, text="or"
>>> IDENTIFIER      line=065, pos=17, text="last"
>>> IDENTIFIER      line=065, pos=22, text="name"
>>> AND             line=065, pos=27, text="and"
>>> IDENTIFIER      line=065, pos=31, text="return"
>>> IDENTIFIER      line=065, pos=38, text="it"
>>> IDENTIFIER      line=065, pos=41, text="by"
>>> IDENTIFIER      line=065, pos=44, text="reference"
>>> DOT             line=065, pos=53, text="."
>>> RIGHT_BRACE     line=065, pos=54, text="}"
066 PROCEDURE readName(VAR name : nameString);
>>> PROCEDURE       line=066, pos= 0, text="PROCEDURE"
>>> IDENTIFIER      line=066, pos=10, text="readName"
>>> LEFT_PAREN      line=066, pos=18, text="("
>>> VAR             line=066, pos=19, text="VAR"
>>> IDENTIFIER      line=066, pos=23, text="name"
>>> COLON           line=066, pos=28, text=":"
>>> IDENTIFIER      line=066, pos=30, text="nameString"
>>> RIGHT_PAREN     line=066, pos=40, text=")"
>>> SEMICOLON       line=066, pos=41, text=";"
067 
068     VAR
>>> VAR             line=068, pos= 4, text="VAR"
069         i : integer;
>>> IDENTIFIER      line=069, pos= 8, text="i"
>>> COLON           line=069, pos=10, text=":"
>>> IDENTIFIER      line=069, pos=12, text="integer"
>>> SEMICOLON       line=069, pos=19, text=";"
070         ch : char;
>>> IDENTIFIER      line=070, pos= 8, text="ch"
>>> COLON           line=070, pos=11, text=":"
>>> IDENTIFIER      line=070, pos=13, text="char"
>>> SEMICOLON       line=070, pos=17, text=";"
071 
072     BEGIN
>>> BEGIN           line=072, pos= 4, text="BEGIN"
073         i := 0;
>>> IDENTIFIER      line=073, pos= 8, text="i"
>>> COLON_EQUALS    line=073, pos=10, text=":="
>>> INTEGER         line=073, pos=13, text="0"
>>>                 value=0
>>> SEMICOLON       line=073, pos=14, text=";"
074         name := ' ';  {initialize to all blanks}
>>> IDENTIFIER      line=074, pos= 8, text="name"
>>> COLON_EQUALS    line=074, pos=13, text=":="
>>> QUOTE           line=074, pos=16, text="'"
>>> QUOTE           line=074, pos=18, text="'"
>>> SEMICOLON       line=074, pos=19, text=";"
>>> LEFT_BRACE      line=074, pos=22, text="{"
>>> IDENTIFIER      line=074, pos=23, text="initialize"
>>> TO              line=074, pos=34, text="to"
>>> IDENTIFIER      line=074, pos=37, text="all"
>>> IDENTIFIER      line=074, pos=41, text="blanks"
>>> RIGHT_BRACE     line=074, pos=47, text="}"
075 
076         {Loop to read name characters until the field separator or
>>> LEFT_BRACE      line=076, pos= 8, text="{"
>>> IDENTIFIER      line=076, pos= 9, text="Loop"
>>> TO              line=076, pos=14, text="to"
>>> IDENTIFIER      line=076, pos=17, text="read"
>>> IDENTIFIER      line=076, pos=22, text="name"
>>> IDENTIFIER      line=076, pos=27, text="characters"
>>> UNTIL           line=076, pos=38, text="until"
>>> IDENTIFIER      line=076, pos=44, text="the"
>>> IDENTIFIER      line=076, pos=48, text="field"
>>> IDENTIFIER      line=076, pos=54, text="separator"
>>> OR              line=076, pos=64, text="or"
077          the end of line or MAX_NAME_LENGTH characters have been read.}
>>> IDENTIFIER      line=077, pos= 9, text="the"
>>> END             line=077, pos=13, text="end"
>>> OF              line=077, pos=17, text="of"
>>> IDENTIFIER      line=077, pos=20, text="line"
>>> OR              line=077, pos=25, text="or"
>>> IDENTIFIER      line=077, pos=28, text="MAX"
                                   ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=077, pos=32, text="NAME"
                                        ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=077, pos=37, text="LENGTH"
>>> IDENTIFIER      line=077, pos=44, text="characters"
>>> IDENTIFIER      line=077, pos=55, text="have"
>>> IDENTIFIER      line=077, pos=60, text="been"
>>> IDENTIFIER      line=077, pos=65, text="read"
>>> DOT             line=077, pos=69, text="."
>>> RIGHT_BRACE     line=077, pos=70, text="}"
078         REPEAT
>>> REPEAT          line=078, pos= 8, text="REPEAT"
079             IF NOT eoln THEN BEGIN
>>> IF              line=079, pos=12, text="IF"
>>> NOT             line=079, pos=15, text="NOT"
>>> IDENTIFIER      line=079, pos=19, text="eoln"
>>> THEN            line=079, pos=24, text="THEN"
>>> BEGIN           line=079, pos=29, text="BEGIN"
080                 read(ch);  {name character}
>>> IDENTIFIER      line=080, pos=16, text="read"
>>> LEFT_PAREN      line=080, pos=20, text="("
>>> IDENTIFIER      line=080, pos=21, text="ch"
>>> RIGHT_PAREN     line=080, pos=23, text=")"
>>> SEMICOLON       line=080, pos=24, text=";"
>>> LEFT_BRACE      line=080, pos=27, text="{"
>>> IDENTIFIER      line=080, pos=28, text="name"
>>> IDENTIFIER      line=080, pos=33, text="character"
>>> RIGHT_BRACE     line=080, pos=42, text="}"
081 
082                 IF  (ch <> FIELD_SEPARATOR)
>>> IF              line=082, pos=16, text="IF"
>>> LEFT_PAREN      line=082, pos=20, text="("
>>> IDENTIFIER      line=082, pos=21, text="ch"
>>> NOT_EQUALS      line=082, pos=24, text="<>"
>>> IDENTIFIER      line=082, pos=27, text="FIELD"
                                    ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=082, pos=33, text="SEPARATOR"
>>> RIGHT_PAREN     line=082, pos=42, text=")"
083                 AND (i <= MAX_NAME_LENGTH) THEN BEGIN
>>> AND             line=083, pos=16, text="AND"
>>> LEFT_PAREN      line=083, pos=20, text="("
>>> IDENTIFIER      line=083, pos=21, text="i"
>>> LESS_EQUALS     line=083, pos=23, text="<="
>>> IDENTIFIER      line=083, pos=26, text="MAX"
                                 ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=083, pos=30, text="NAME"
                                      ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=083, pos=35, text="LENGTH"
>>> RIGHT_PAREN     line=083, pos=41, text=")"
>>> THEN            line=083, pos=43, text="THEN"
>>> BEGIN           line=083, pos=48, text="BEGIN"
084                     i := i + 1;
>>> IDENTIFIER      line=084, pos=20, text="i"
>>> COLON_EQUALS    line=084, pos=22, text=":="
>>> IDENTIFIER      line=084, pos=25, text="i"
>>> PLUS            line=084, pos=27, text="+"
>>> INTEGER         line=084, pos=29, text="1"
>>>                 value=1
>>> SEMICOLON       line=084, pos=30, text=";"
085                     name[i] := ch;
>>> IDENTIFIER      line=085, pos=20, text="name"
>>> LEFT_BRACKET    line=085, pos=24, text="["
>>> IDENTIFIER      line=085, pos=25, text="i"
>>> RIGHT_BRACKET   line=085, pos=26, text="]"
>>> COLON_EQUALS    line=085, pos=28, text=":="
>>> IDENTIFIER      line=085, pos=31, text="ch"
>>> SEMICOLON       line=085, pos=33, text=";"
086                 END;
>>> END             line=086, pos=16, text="END"
>>> SEMICOLON       line=086, pos=19, text=";"
087             END;
>>> END             line=087, pos=12, text="END"
>>> SEMICOLON       line=087, pos=15, text=";"
088         UNTIL eoln OR (ch = FIELD_SEPARATOR) OR (i = MAX_NAME_LENGTH);
>>> UNTIL           line=088, pos= 8, text="UNTIL"
>>> IDENTIFIER      line=088, pos=14, text="eoln"
>>> OR              line=088, pos=19, text="OR"
>>> LEFT_PAREN      line=088, pos=22, text="("
>>> IDENTIFIER      line=088, pos=23, text="ch"
>>> EQUALS          line=088, pos=26, text="="
>>> IDENTIFIER      line=088, pos=28, text="FIELD"
                                     ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=088, pos=34, text="SEPARATOR"
>>> RIGHT_PAREN     line=088, pos=43, text=")"
>>> OR              line=088, pos=45, text="OR"
>>> LEFT_PAREN      line=088, pos=48, text="("
>>> IDENTIFIER      line=088, pos=49, text="i"
>>> EQUALS          line=088, pos=51, text="="
>>> IDENTIFIER      line=088, pos=53, text="MAX"
                                                            ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=088, pos=57, text="NAME"
                                                                 ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=088, pos=62, text="LENGTH"
>>> RIGHT_PAREN     line=088, pos=68, text=")"
>>> SEMICOLON       line=088, pos=69, text=";"
089 
090         {Read the rest of the name if more than MAX_NAME_LENGTH characters.}
>>> LEFT_BRACE      line=090, pos= 8, text="{"
>>> IDENTIFIER      line=090, pos= 9, text="Read"
>>> IDENTIFIER      line=090, pos=14, text="the"
>>> IDENTIFIER      line=090, pos=18, text="rest"
>>> OF              line=090, pos=23, text="of"
>>> IDENTIFIER      line=090, pos=26, text="the"
>>> IDENTIFIER      line=090, pos=30, text="name"
>>> IF              line=090, pos=35, text="if"
>>> IDENTIFIER      line=090, pos=38, text="more"
>>> IDENTIFIER      line=090, pos=43, text="than"
>>> IDENTIFIER      line=090, pos=48, text="MAX"
                                                       ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=090, pos=52, text="NAME"
                                                            ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=090, pos=57, text="LENGTH"
>>> IDENTIFIER      line=090, pos=64, text="characters"
>>> DOT             line=090, pos=74, text="."
>>> RIGHT_BRACE     line=090, pos=75, text="}"
091         IF i = MAX_NAME_LENGTH THEN BEGIN
>>> IF              line=091, pos= 8, text="IF"
>>> IDENTIFIER      line=091, pos=11, text="i"
>>> EQUALS          line=091, pos=13, text="="
>>> IDENTIFIER      line=091, pos=15, text="MAX"
                      ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=091, pos=19, text="NAME"
                           ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=091, pos=24, text="LENGTH"
>>> THEN            line=091, pos=31, text="THEN"
>>> BEGIN           line=091, pos=36, text="BEGIN"
092             WHILE (NOT eoln) AND (ch <> FIELD_SEPARATOR) DO BEGIN
>>> WHILE           line=092, pos=12, text="WHILE"
>>> LEFT_PAREN      line=092, pos=18, text="("
>>> NOT             line=092, pos=19, text="NOT"
>>> IDENTIFIER      line=092, pos=23, text="eoln"
>>> RIGHT_PAREN     line=092, pos=27, text=")"
>>> AND             line=092, pos=29, text="AND"
>>> LEFT_PAREN      line=092, pos=33, text="("
>>> IDENTIFIER      line=092, pos=34, text="ch"
>>> NOT_EQUALS      line=092, pos=37, text="<>"
>>> IDENTIFIER      line=092, pos=40, text="FIELD"
                                                 ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=092, pos=46, text="SEPARATOR"
>>> RIGHT_PAREN     line=092, pos=55, text=")"
>>> DO              line=092, pos=57, text="DO"
>>> BEGIN           line=092, pos=60, text="BEGIN"
093                 read(ch);
>>> IDENTIFIER      line=093, pos=16, text="read"
>>> LEFT_PAREN      line=093, pos=20, text="("
>>> IDENTIFIER      line=093, pos=21, text="ch"
>>> RIGHT_PAREN     line=093, pos=23, text=")"
>>> SEMICOLON       line=093, pos=24, text=";"
094             END;
>>> END             line=094, pos=12, text="END"
>>> SEMICOLON       line=094, pos=15, text=";"
095         END;
>>> END             line=095, pos= 8, text="END"
>>> SEMICOLON       line=095, pos=11, text=";"
096     END;
>>> END             line=096, pos= 4, text="END"
>>> SEMICOLON       line=096, pos= 7, text=";"
097 
098 {Compute the employee's profession based on the job code.}
>>> LEFT_BRACE      line=098, pos= 0, text="{"
>>> IDENTIFIER      line=098, pos= 1, text="Compute"
>>> IDENTIFIER      line=098, pos= 9, text="the"
>>> IDENTIFIER      line=098, pos=13, text="employee"
>>> QUOTE           line=098, pos=21, text="'"
>>> IDENTIFIER      line=098, pos=22, text="s"
>>> IDENTIFIER      line=098, pos=24, text="profession"
>>> IDENTIFIER      line=098, pos=35, text="based"
>>> IDENTIFIER      line=098, pos=41, text="on"
>>> IDENTIFIER      line=098, pos=44, text="the"
>>> IDENTIFIER      line=098, pos=48, text="job"
>>> IDENTIFIER      line=098, pos=52, text="code"
>>> DOT             line=098, pos=56, text="."
>>> RIGHT_BRACE     line=098, pos=57, text="}"
099 FUNCTION computeProfession(jobCode : codeChar) : professionEnum;
>>> FUNCTION        line=099, pos= 0, text="FUNCTION"
>>> IDENTIFIER      line=099, pos= 9, text="computeProfession"
>>> LEFT_PAREN      line=099, pos=26, text="("
>>> IDENTIFIER      line=099, pos=27, text="jobCode"
>>> COLON           line=099, pos=35, text=":"
>>> IDENTIFIER      line=099, pos=37, text="codeChar"
>>> RIGHT_PAREN     line=099, pos=45, text=")"
>>> COLON           line=099, pos=47, text=":"
>>> IDENTIFIER      line=099, pos=49, text="professionEnum"
>>> SEMICOLON       line=099, pos=63, text=";"
100 
101     BEGIN
>>> BEGIN           line=101, pos= 4, text="BEGIN"
102         IF jobCode IN scientistCodes THEN BEGIN
>>> IF              line=102, pos= 8, text="IF"
>>> IDENTIFIER      line=102, pos=11, text="jobCode"
>>> IN              line=102, pos=19, text="IN"
>>> IDENTIFIER      line=102, pos=22, text="scientistCodes"
>>> THEN            line=102, pos=37, text="THEN"
>>> BEGIN           line=102, pos=42, text="BEGIN"
103             computeProfession := SCIENTIST;
>>> IDENTIFIER      line=103, pos=12, text="computeProfession"
>>> COLON_EQUALS    line=103, pos=30, text=":="
>>> IDENTIFIER      line=103, pos=33, text="SCIENTIST"
>>> SEMICOLON       line=103, pos=42, text=";"
104         END
>>> END             line=104, pos= 8, text="END"
105         ELSE IF jobCode IN teacherCodes THEN BEGIN
>>> ELSE            line=105, pos= 8, text="ELSE"
>>> IF              line=105, pos=13, text="IF"
>>> IDENTIFIER      line=105, pos=16, text="jobCode"
>>> IN              line=105, pos=24, text="IN"
>>> IDENTIFIER      line=105, pos=27, text="teacherCodes"
>>> THEN            line=105, pos=40, text="THEN"
>>> BEGIN           line=105, pos=45, text="BEGIN"
106             computeProfession := TEACHER;
>>> IDENTIFIER      line=106, pos=12, text="computeProfession"
>>> COLON_EQUALS    line=106, pos=30, text=":="
>>> IDENTIFIER      line=106, pos=33, text="TEACHER"
>>> SEMICOLON       line=106, pos=40, text=";"
107         END
>>> END             line=107, pos= 8, text="END"
108         ELSE BEGIN
>>> ELSE            line=108, pos= 8, text="ELSE"
>>> BEGIN           line=108, pos=13, text="BEGIN"
109             computeProfession := UNKNOWN;
>>> IDENTIFIER      line=109, pos=12, text="computeProfession"
>>> COLON_EQUALS    line=109, pos=30, text=":="
>>> IDENTIFIER      line=109, pos=33, text="UNKNOWN"
>>> SEMICOLON       line=109, pos=40, text=";"
110         END;
>>> END             line=110, pos= 8, text="END"
>>> SEMICOLON       line=110, pos=11, text=";"
111     END;
>>> END             line=111, pos= 4, text="END"
>>> SEMICOLON       line=111, pos= 7, text=";"
112 
113 {Read the employee records.}
>>> LEFT_BRACE      line=113, pos= 0, text="{"
>>> IDENTIFIER      line=113, pos= 1, text="Read"
>>> IDENTIFIER      line=113, pos= 6, text="the"
>>> IDENTIFIER      line=113, pos=10, text="employee"
>>> IDENTIFIER      line=113, pos=19, text="records"
>>> DOT             line=113, pos=26, text="."
>>> RIGHT_BRACE     line=113, pos=27, text="}"
114 PROCEDURE readEmployees;
>>> PROCEDURE       line=114, pos= 0, text="PROCEDURE"
>>> IDENTIFIER      line=114, pos=10, text="readEmployees"
>>> SEMICOLON       line=114, pos=23, text=";"
115 
116     VAR
>>> VAR             line=116, pos= 4, text="VAR"
117         i : integer;
>>> IDENTIFIER      line=117, pos= 8, text="i"
>>> COLON           line=117, pos=10, text=":"
>>> IDENTIFIER      line=117, pos=12, text="integer"
>>> SEMICOLON       line=117, pos=19, text=";"
118 
119     BEGIN
>>> BEGIN           line=119, pos= 4, text="BEGIN"
120         i := 0;
>>> IDENTIFIER      line=120, pos= 8, text="i"
>>> COLON_EQUALS    line=120, pos=10, text=":="
>>> INTEGER         line=120, pos=13, text="0"
>>>                 value=0
>>> SEMICOLON       line=120, pos=14, text=";"
121 
122         {Read to the end of file or until MAX_EMPLOYEES have been read.}
>>> LEFT_BRACE      line=122, pos= 8, text="{"
>>> IDENTIFIER      line=122, pos= 9, text="Read"
>>> TO              line=122, pos=14, text="to"
>>> IDENTIFIER      line=122, pos=17, text="the"
>>> END             line=122, pos=21, text="end"
>>> OF              line=122, pos=25, text="of"
>>> FILE            line=122, pos=28, text="file"
>>> OR              line=122, pos=33, text="or"
>>> UNTIL           line=122, pos=36, text="until"
>>> IDENTIFIER      line=122, pos=42, text="MAX"
                                                 ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=122, pos=46, text="EMPLOYEES"
>>> IDENTIFIER      line=122, pos=56, text="have"
>>> IDENTIFIER      line=122, pos=61, text="been"
>>> IDENTIFIER      line=122, pos=66, text="read"
>>> DOT             line=122, pos=70, text="."
>>> RIGHT_BRACE     line=122, pos=71, text="}"
123         WHILE (NOT eof) AND (i < MAX_EMPLOYEES) DO BEGIN
>>> WHILE           line=123, pos= 8, text="WHILE"
>>> LEFT_PAREN      line=123, pos=14, text="("
>>> NOT             line=123, pos=15, text="NOT"
>>> IDENTIFIER      line=123, pos=19, text="eof"
>>> RIGHT_PAREN     line=123, pos=22, text=")"
>>> AND             line=123, pos=24, text="AND"
>>> LEFT_PAREN      line=123, pos=28, text="("
>>> IDENTIFIER      line=123, pos=29, text="i"
>>> LESS_THAN       line=123, pos=31, text="<"
>>> IDENTIFIER      line=123, pos=33, text="MAX"
                                        ^
*** Invalid character [at "_"]
>>> IDENTIFIER      line=123, pos=37, text="EMPLOYEES"
>>> RIGHT_PAREN     line=123, pos=46, text=")"
>>> DO              line=123, pos=48, text="DO"
>>> BEGIN           line=123, pos=51, text="BEGIN"
124             i := i + 1;
>>> IDENTIFIER      line=124, pos=12, text="i"
>>> COLON_EQUALS    line=124, pos=14, text=":="
>>> IDENTIFIER      line=124, pos=17, text="i"
>>> PLUS            line=124, pos=19, text="+"
>>> INTEGER         line=124, pos=21, text="1"
>>>                 value=1
>>> SEMICOLON       line=124, pos=22, text=";"
125 
126             WITH employees[i] DO BEGIN
>>> WITH            line=126, pos=12, text="WITH"
>>> IDENTIFIER      line=126, pos=17, text="employees"
>>> LEFT_BRACKET    line=126, pos=26, text="["
>>> IDENTIFIER      line=126, pos=27, text="i"
>>> RIGHT_BRACKET   line=126, pos=28, text="]"
>>> DO              line=126, pos=30, text="DO"
>>> BEGIN           line=126, pos=33, text="BEGIN"
127                 id := readId;
>>> IDENTIFIER      line=127, pos=16, text="id"
>>> COLON_EQUALS    line=127, pos=19, text=":="
>>> IDENTIFIER      line=127, pos=22, text="readId"
>>> SEMICOLON       line=127, pos=28, text=";"
128                 jobCode := readJobCode;
>>> IDENTIFIER      line=128, pos=16, text="jobCode"
>>> COLON_EQUALS    line=128, pos=24, text=":="
>>> IDENTIFIER      line=128, pos=27, text="readJobCode"
>>> SEMICOLON       line=128, pos=38, text=";"
129                 readName(lastName);
>>> IDENTIFIER      line=129, pos=16, text="readName"
>>> LEFT_PAREN      line=129, pos=24, text="("
>>> IDENTIFIER      line=129, pos=25, text="lastName"
>>> RIGHT_PAREN     line=129, pos=33, text=")"
>>> SEMICOLON       line=129, pos=34, text=";"
130                 readName(firstName);
>>> IDENTIFIER      line=130, pos=16, text="readName"
>>> LEFT_PAREN      line=130, pos=24, text="("
>>> IDENTIFIER      line=130, pos=25, text="firstName"
>>> RIGHT_PAREN     line=130, pos=34, text=")"
>>> SEMICOLON       line=130, pos=35, text=";"
131                 profession := computeProfession(jobCode);
>>> IDENTIFIER      line=131, pos=16, text="profession"
>>> COLON_EQUALS    line=131, pos=27, text=":="
>>> IDENTIFIER      line=131, pos=30, text="computeProfession"
>>> LEFT_PAREN      line=131, pos=47, text="("
>>> IDENTIFIER      line=131, pos=48, text="jobCode"
>>> RIGHT_PAREN     line=131, pos=55, text=")"
>>> SEMICOLON       line=131, pos=56, text=";"
132                 readln;
>>> IDENTIFIER      line=132, pos=16, text="readln"
>>> SEMICOLON       line=132, pos=22, text=";"
133             END;
>>> END             line=133, pos=12, text="END"
>>> SEMICOLON       line=133, pos=15, text=";"
134         END;
>>> END             line=134, pos= 8, text="END"
>>> SEMICOLON       line=134, pos=11, text=";"
135 
136         employeeCount := i;
>>> IDENTIFIER      line=136, pos= 8, text="employeeCount"
>>> COLON_EQUALS    line=136, pos=22, text=":="
>>> IDENTIFIER      line=136, pos=25, text="i"
>>> SEMICOLON       line=136, pos=26, text=";"
137     END;
>>> END             line=137, pos= 4, text="END"
>>> SEMICOLON       line=137, pos= 7, text=";"
138 
139 {Sort the employee records by employee ID.}
>>> LEFT_BRACE      line=139, pos= 0, text="{"
>>> IDENTIFIER      line=139, pos= 1, text="Sort"
>>> IDENTIFIER      line=139, pos= 6, text="the"
>>> IDENTIFIER      line=139, pos=10, text="employee"
>>> IDENTIFIER      line=139, pos=19, text="records"
>>> IDENTIFIER      line=139, pos=27, text="by"
>>> IDENTIFIER      line=139, pos=30, text="employee"
>>> IDENTIFIER      line=139, pos=39, text="ID"
>>> DOT             line=139, pos=41, text="."
>>> RIGHT_BRACE     line=139, pos=42, text="}"
140 PROCEDURE sortEmployees;
>>> PROCEDURE       line=140, pos= 0, text="PROCEDURE"
>>> IDENTIFIER      line=140, pos=10, text="sortEmployees"
>>> SEMICOLON       line=140, pos=23, text=";"
141 
142     VAR
>>> VAR             line=142, pos= 4, text="VAR"
143         i, j : integer;
>>> IDENTIFIER      line=143, pos= 8, text="i"
>>> COMMA           line=143, pos= 9, text=","
>>> IDENTIFIER      line=143, pos=11, text="j"
>>> COLON           line=143, pos=13, text=":"
>>> IDENTIFIER      line=143, pos=15, text="integer"
>>> SEMICOLON       line=143, pos=22, text=";"
144         temp : employeeRec;
>>> IDENTIFIER      line=144, pos= 8, text="temp"
>>> COLON           line=144, pos=13, text=":"
>>> IDENTIFIER      line=144, pos=15, text="employeeRec"
>>> SEMICOLON       line=144, pos=26, text=";"
145 
146     BEGIN
>>> BEGIN           line=146, pos= 4, text="BEGIN"
147         FOR i := 1 TO employeeCount-1 DO BEGIN
>>> FOR             line=147, pos= 8, text="FOR"
>>> IDENTIFIER      line=147, pos=12, text="i"
>>> COLON_EQUALS    line=147, pos=14, text=":="
>>> INTEGER         line=147, pos=17, text="1"
>>>                 value=1
>>> TO              line=147, pos=19, text="TO"
>>> IDENTIFIER      line=147, pos=22, text="employeeCount"
>>> MINUS           line=147, pos=35, text="-"
>>> INTEGER         line=147, pos=36, text="1"
>>>                 value=1
>>> DO              line=147, pos=38, text="DO"
>>> BEGIN           line=147, pos=41, text="BEGIN"
148             FOR j := i+1 TO employeeCount DO BEGIN
>>> FOR             line=148, pos=12, text="FOR"
>>> IDENTIFIER      line=148, pos=16, text="j"
>>> COLON_EQUALS    line=148, pos=18, text=":="
>>> IDENTIFIER      line=148, pos=21, text="i"
>>> PLUS            line=148, pos=22, text="+"
>>> INTEGER         line=148, pos=23, text="1"
>>>                 value=1
>>> TO              line=148, pos=25, text="TO"
>>> IDENTIFIER      line=148, pos=28, text="employeeCount"
>>> DO              line=148, pos=42, text="DO"
>>> BEGIN           line=148, pos=45, text="BEGIN"
149                 IF employees[i].id > employees[j].id THEN BEGIN
>>> IF              line=149, pos=16, text="IF"
>>> IDENTIFIER      line=149, pos=19, text="employees"
>>> LEFT_BRACKET    line=149, pos=28, text="["
>>> IDENTIFIER      line=149, pos=29, text="i"
>>> RIGHT_BRACKET   line=149, pos=30, text="]"
>>> DOT             line=149, pos=31, text="."
>>> IDENTIFIER      line=149, pos=32, text="id"
>>> GREATER_THAN    line=149, pos=35, text=">"
>>> IDENTIFIER      line=149, pos=37, text="employees"
>>> LEFT_BRACKET    line=149, pos=46, text="["
>>> IDENTIFIER      line=149, pos=47, text="j"
>>> RIGHT_BRACKET   line=149, pos=48, text="]"
>>> DOT             line=149, pos=49, text="."
>>> IDENTIFIER      line=149, pos=50, text="id"
>>> THEN            line=149, pos=53, text="THEN"
>>> BEGIN           line=149, pos=58, text="BEGIN"
150                     temp         := employees[i];
>>> IDENTIFIER      line=150, pos=20, text="temp"
>>> COLON_EQUALS    line=150, pos=33, text=":="
>>> IDENTIFIER      line=150, pos=36, text="employees"
>>> LEFT_BRACKET    line=150, pos=45, text="["
>>> IDENTIFIER      line=150, pos=46, text="i"
>>> RIGHT_BRACKET   line=150, pos=47, text="]"
>>> SEMICOLON       line=150, pos=48, text=";"
151                     employees[i] := employees[j];
>>> IDENTIFIER      line=151, pos=20, text="employees"
>>> LEFT_BRACKET    line=151, pos=29, text="["
>>> IDENTIFIER      line=151, pos=30, text="i"
>>> RIGHT_BRACKET   line=151, pos=31, text="]"
>>> COLON_EQUALS    line=151, pos=33, text=":="
>>> IDENTIFIER      line=151, pos=36, text="employees"
>>> LEFT_BRACKET    line=151, pos=45, text="["
>>> IDENTIFIER      line=151, pos=46, text="j"
>>> RIGHT_BRACKET   line=151, pos=47, text="]"
>>> SEMICOLON       line=151, pos=48, text=";"
152                     employees[j] := temp;
>>> IDENTIFIER      line=152, pos=20, text="employees"
>>> LEFT_BRACKET    line=152, pos=29, text="["
>>> IDENTIFIER      line=152, pos=30, text="j"
>>> RIGHT_BRACKET   line=152, pos=31, text="]"
>>> COLON_EQUALS    line=152, pos=33, text=":="
>>> IDENTIFIER      line=152, pos=36, text="temp"
>>> SEMICOLON       line=152, pos=40, text=";"
153                 END;
>>> END             line=153, pos=16, text="END"
>>> SEMICOLON       line=153, pos=19, text=";"
154             END;
>>> END             line=154, pos=12, text="END"
>>> SEMICOLON       line=154, pos=15, text=";"
155         END;
>>> END             line=155, pos= 8, text="END"
>>> SEMICOLON       line=155, pos=11, text=";"
156     END;
>>> END             line=156, pos= 4, text="END"
>>> SEMICOLON       line=156, pos= 7, text=";"
157 
158 {Print the employee records.}
>>> LEFT_BRACE      line=158, pos= 0, text="{"
>>> IDENTIFIER      line=158, pos= 1, text="Print"
>>> IDENTIFIER      line=158, pos= 7, text="the"
>>> IDENTIFIER      line=158, pos=11, text="employee"
>>> IDENTIFIER      line=158, pos=20, text="records"
>>> DOT             line=158, pos=27, text="."
>>> RIGHT_BRACE     line=158, pos=28, text="}"
159 PROCEDURE printEmployees;
>>> PROCEDURE       line=159, pos= 0, text="PROCEDURE"
>>> IDENTIFIER      line=159, pos=10, text="printEmployees"
>>> SEMICOLON       line=159, pos=24, text=";"
160 
161     VAR
>>> VAR             line=161, pos= 4, text="VAR"
162         i : integer;
>>> IDENTIFIER      line=162, pos= 8, text="i"
>>> COLON           line=162, pos=10, text=":"
>>> IDENTIFIER      line=162, pos=12, text="integer"
>>> SEMICOLON       line=162, pos=19, text=";"
163 
164     BEGIN
>>> BEGIN           line=164, pos= 4, text="BEGIN"
165         FOR i := 1 TO employeeCount DO BEGIN
>>> FOR             line=165, pos= 8, text="FOR"
>>> IDENTIFIER      line=165, pos=12, text="i"
>>> COLON_EQUALS    line=165, pos=14, text=":="
>>> INTEGER         line=165, pos=17, text="1"
>>>                 value=1
>>> TO              line=165, pos=19, text="TO"
>>> IDENTIFIER      line=165, pos=22, text="employeeCount"
>>> DO              line=165, pos=36, text="DO"
>>> BEGIN           line=165, pos=39, text="BEGIN"
166             writeln;
>>> IDENTIFIER      line=166, pos=12, text="writeln"
>>> SEMICOLON       line=166, pos=19, text=";"
167 
168             WITH employees[i] DO BEGIN
>>> WITH            line=168, pos=12, text="WITH"
>>> IDENTIFIER      line=168, pos=17, text="employees"
>>> LEFT_BRACKET    line=168, pos=26, text="["
>>> IDENTIFIER      line=168, pos=27, text="i"
>>> RIGHT_BRACKET   line=168, pos=28, text="]"
>>> DO              line=168, pos=30, text="DO"
>>> BEGIN           line=168, pos=33, text="BEGIN"
169                 writeln('        Id: ', id);
>>> IDENTIFIER      line=169, pos=16, text="writeln"
>>> LEFT_PAREN      line=169, pos=23, text="("
>>> QUOTE           line=169, pos=24, text="'"
>>> IDENTIFIER      line=169, pos=33, text="Id"
>>> COLON           line=169, pos=35, text=":"
>>> QUOTE           line=169, pos=37, text="'"
>>> COMMA           line=169, pos=38, text=","
>>> IDENTIFIER      line=169, pos=40, text="id"
>>> RIGHT_PAREN     line=169, pos=42, text=")"
>>> SEMICOLON       line=169, pos=43, text=";"
170                 writeln('  Job code: ', jobCode);
>>> IDENTIFIER      line=170, pos=16, text="writeln"
>>> LEFT_PAREN      line=170, pos=23, text="("
>>> QUOTE           line=170, pos=24, text="'"
>>> IDENTIFIER      line=170, pos=27, text="Job"
>>> IDENTIFIER      line=170, pos=31, text="code"
>>> COLON           line=170, pos=35, text=":"
>>> QUOTE           line=170, pos=37, text="'"
>>> COMMA           line=170, pos=38, text=","
>>> IDENTIFIER      line=170, pos=40, text="jobCode"
>>> RIGHT_PAREN     line=170, pos=47, text=")"
>>> SEMICOLON       line=170, pos=48, text=";"
171                 writeln(' Last name: ', lastName);
>>> IDENTIFIER      line=171, pos=16, text="writeln"
>>> LEFT_PAREN      line=171, pos=23, text="("
>>> QUOTE           line=171, pos=24, text="'"
>>> IDENTIFIER      line=171, pos=26, text="Last"
>>> IDENTIFIER      line=171, pos=31, text="name"
>>> COLON           line=171, pos=35, text=":"
>>> QUOTE           line=171, pos=37, text="'"
>>> COMMA           line=171, pos=38, text=","
>>> IDENTIFIER      line=171, pos=40, text="lastName"
>>> RIGHT_PAREN     line=171, pos=48, text=")"
>>> SEMICOLON       line=171, pos=49, text=";"
172                 writeln('First name: ', firstName);
>>> IDENTIFIER      line=172, pos=16, text="writeln"
>>> LEFT_PAREN      line=172, pos=23, text="("
>>> QUOTE           line=172, pos=24, text="'"
>>> IDENTIFIER      line=172, pos=25, text="First"
>>> IDENTIFIER      line=172, pos=31, text="name"
>>> COLON           line=172, pos=35, text=":"
>>> QUOTE           line=172, pos=37, text="'"
>>> COMMA           line=172, pos=38, text=","
>>> IDENTIFIER      line=172, pos=40, text="firstName"
>>> RIGHT_PAREN     line=172, pos=49, text=")"
>>> SEMICOLON       line=172, pos=50, text=";"
173 
174                 write('Profession: ');
>>> IDENTIFIER      line=174, pos=16, text="write"
>>> LEFT_PAREN      line=174, pos=21, text="("
>>> QUOTE           line=174, pos=22, text="'"
>>> IDENTIFIER      line=174, pos=23, text="Profession"
>>> COLON           line=174, pos=33, text=":"
>>> QUOTE           line=174, pos=35, text="'"
>>> RIGHT_PAREN     line=174, pos=36, text=")"
>>> SEMICOLON       line=174, pos=37, text=";"
175                 CASE profession OF
>>> CASE            line=175, pos=16, text="CASE"
>>> IDENTIFIER      line=175, pos=21, text="profession"
>>> OF              line=175, pos=32, text="OF"
176                     SCIENTIST: writeln('scientist');
>>> IDENTIFIER      line=176, pos=20, text="SCIENTIST"
>>> COLON           line=176, pos=29, text=":"
>>> IDENTIFIER      line=176, pos=31, text="writeln"
>>> LEFT_PAREN      line=176, pos=38, text="("
>>> QUOTE           line=176, pos=39, text="'"
>>> IDENTIFIER      line=176, pos=40, text="scientist"
>>> QUOTE           line=176, pos=49, text="'"
>>> RIGHT_PAREN     line=176, pos=50, text=")"
>>> SEMICOLON       line=176, pos=51, text=";"
177                     TEACHER:   writeln('teacher');
>>> IDENTIFIER      line=177, pos=20, text="TEACHER"
>>> COLON           line=177, pos=27, text=":"
>>> IDENTIFIER      line=177, pos=31, text="writeln"
>>> LEFT_PAREN      line=177, pos=38, text="("
>>> QUOTE           line=177, pos=39, text="'"
>>> IDENTIFIER      line=177, pos=40, text="teacher"
>>> QUOTE           line=177, pos=47, text="'"
>>> RIGHT_PAREN     line=177, pos=48, text=")"
>>> SEMICOLON       line=177, pos=49, text=";"
178                     UNKNOWN:   writeln('unknown');
>>> IDENTIFIER      line=178, pos=20, text="UNKNOWN"
>>> COLON           line=178, pos=27, text=":"
>>> IDENTIFIER      line=178, pos=31, text="writeln"
>>> LEFT_PAREN      line=178, pos=38, text="("
>>> QUOTE           line=178, pos=39, text="'"
>>> IDENTIFIER      line=178, pos=40, text="unknown"
>>> QUOTE           line=178, pos=47, text="'"
>>> RIGHT_PAREN     line=178, pos=48, text=")"
>>> SEMICOLON       line=178, pos=49, text=";"
179                 END;
>>> END             line=179, pos=16, text="END"
>>> SEMICOLON       line=179, pos=19, text=";"
180             END;
>>> END             line=180, pos=12, text="END"
>>> SEMICOLON       line=180, pos=15, text=";"
181         END;
>>> END             line=181, pos= 8, text="END"
>>> SEMICOLON       line=181, pos=11, text=";"
182 
183         writeln;
>>> IDENTIFIER      line=183, pos= 8, text="writeln"
>>> SEMICOLON       line=183, pos=15, text=";"
184         writeln(employeeCount:1, ' employees read.');
>>> IDENTIFIER      line=184, pos= 8, text="writeln"
>>> LEFT_PAREN      line=184, pos=15, text="("
>>> IDENTIFIER      line=184, pos=16, text="employeeCount"
>>> COLON           line=184, pos=29, text=":"
>>> INTEGER         line=184, pos=30, text="1"
>>>                 value=1
>>> COMMA           line=184, pos=31, text=","
>>> QUOTE           line=184, pos=33, text="'"
>>> IDENTIFIER      line=184, pos=35, text="employees"
>>> IDENTIFIER      line=184, pos=45, text="read"
>>> DOT             line=184, pos=49, text="."
>>> QUOTE           line=184, pos=50, text="'"
>>> RIGHT_PAREN     line=184, pos=51, text=")"
>>> SEMICOLON       line=184, pos=52, text=";"
185     END;
>>> END             line=185, pos= 4, text="END"
>>> SEMICOLON       line=185, pos= 7, text=";"
186 
187 {Check for extra records.}
>>> LEFT_BRACE      line=187, pos= 0, text="{"
>>> IDENTIFIER      line=187, pos= 1, text="Check"
>>> FOR             line=187, pos= 7, text="for"
>>> IDENTIFIER      line=187, pos=11, text="extra"
>>> IDENTIFIER      line=187, pos=17, text="records"
>>> DOT             line=187, pos=24, text="."
>>> RIGHT_BRACE     line=187, pos=25, text="}"
188 PROCEDURE checkForExtras;
>>> PROCEDURE       line=188, pos= 0, text="PROCEDURE"
>>> IDENTIFIER      line=188, pos=10, text="checkForExtras"
>>> SEMICOLON       line=188, pos=24, text=";"
189 
190     VAR
>>> VAR             line=190, pos= 4, text="VAR"
191         extra : PACKED ARRAY [1..80] OF char;
>>> IDENTIFIER      line=191, pos= 8, text="extra"
>>> COLON           line=191, pos=14, text=":"
>>> PACKED          line=191, pos=16, text="PACKED"
>>> ARRAY           line=191, pos=23, text="ARRAY"
>>> LEFT_BRACKET    line=191, pos=29, text="["
>>> INTEGER         line=191, pos=30, text="1"
>>>                 value=1
>>> DOT_DOT         line=191, pos=31, text=".."
>>> INTEGER         line=191, pos=33, text="80"
>>>                 value=80
>>> RIGHT_BRACKET   line=191, pos=35, text="]"
>>> OF              line=191, pos=37, text="OF"
>>> IDENTIFIER      line=191, pos=40, text="char"
>>> SEMICOLON       line=191, pos=44, text=";"
192 
193     BEGIN
>>> BEGIN           line=193, pos= 4, text="BEGIN"
194         IF NOT eof THEN BEGIN
>>> IF              line=194, pos= 8, text="IF"
>>> NOT             line=194, pos=11, text="NOT"
>>> IDENTIFIER      line=194, pos=15, text="eof"
>>> THEN            line=194, pos=19, text="THEN"
>>> BEGIN           line=194, pos=24, text="BEGIN"
195             writeln;
>>> IDENTIFIER      line=195, pos=12, text="writeln"
>>> SEMICOLON       line=195, pos=19, text=";"
196             writeln('WARNING: Unprocessed records:');
>>> IDENTIFIER      line=196, pos=12, text="writeln"
>>> LEFT_PAREN      line=196, pos=19, text="("
>>> QUOTE           line=196, pos=20, text="'"
>>> IDENTIFIER      line=196, pos=21, text="WARNING"
>>> COLON           line=196, pos=28, text=":"
>>> IDENTIFIER      line=196, pos=30, text="Unprocessed"
>>> IDENTIFIER      line=196, pos=42, text="records"
>>> COLON           line=196, pos=49, text=":"
>>> QUOTE           line=196, pos=50, text="'"
>>> RIGHT_PAREN     line=196, pos=51, text=")"
>>> SEMICOLON       line=196, pos=52, text=";"
197             writeln;
>>> IDENTIFIER      line=197, pos=12, text="writeln"
>>> SEMICOLON       line=197, pos=19, text=";"
198 
199             WHILE NOT eof DO BEGIN
>>> WHILE           line=199, pos=12, text="WHILE"
>>> NOT             line=199, pos=18, text="NOT"
>>> IDENTIFIER      line=199, pos=22, text="eof"
>>> DO              line=199, pos=26, text="DO"
>>> BEGIN           line=199, pos=29, text="BEGIN"
200                 extra := ' ';
>>> IDENTIFIER      line=200, pos=16, text="extra"
>>> COLON_EQUALS    line=200, pos=22, text=":="
>>> QUOTE           line=200, pos=25, text="'"
>>> QUOTE           line=200, pos=27, text="'"
>>> SEMICOLON       line=200, pos=28, text=";"
201                 readln(extra);
>>> IDENTIFIER      line=201, pos=16, text="readln"
>>> LEFT_PAREN      line=201, pos=22, text="("
>>> IDENTIFIER      line=201, pos=23, text="extra"
>>> RIGHT_PAREN     line=201, pos=28, text=")"
>>> SEMICOLON       line=201, pos=29, text=";"
202                 writeln('    ', extra);
>>> IDENTIFIER      line=202, pos=16, text="writeln"
>>> LEFT_PAREN      line=202, pos=23, text="("
>>> QUOTE           line=202, pos=24, text="'"
>>> QUOTE           line=202, pos=29, text="'"
>>> COMMA           line=202, pos=30, text=","
>>> IDENTIFIER      line=202, pos=32, text="extra"
>>> RIGHT_PAREN     line=202, pos=37, text=")"
>>> SEMICOLON       line=202, pos=38, text=";"
203             END;
>>> END             line=203, pos=12, text="END"
>>> SEMICOLON       line=203, pos=15, text=";"
204         END;
>>> END             line=204, pos= 8, text="END"
>>> SEMICOLON       line=204, pos=11, text=";"
205     END;
>>> END             line=205, pos= 4, text="END"
>>> SEMICOLON       line=205, pos= 7, text=";"
206 
207 BEGIN {EmployeeListing}
>>> BEGIN           line=207, pos= 0, text="BEGIN"
>>> LEFT_BRACE      line=207, pos= 6, text="{"
>>> IDENTIFIER      line=207, pos= 7, text="EmployeeListing"
>>> RIGHT_BRACE     line=207, pos=22, text="}"
208     scientistCodes := ['B', 'C', 'P'];
>>> IDENTIFIER      line=208, pos= 4, text="scientistCodes"
>>> COLON_EQUALS    line=208, pos=19, text=":="
>>> LEFT_BRACKET    line=208, pos=22, text="["
>>> QUOTE           line=208, pos=23, text="'"
>>> IDENTIFIER      line=208, pos=24, text="B"
>>> QUOTE           line=208, pos=25, text="'"
>>> COMMA           line=208, pos=26, text=","
>>> QUOTE           line=208, pos=28, text="'"
>>> IDENTIFIER      line=208, pos=29, text="C"
>>> QUOTE           line=208, pos=30, text="'"
>>> COMMA           line=208, pos=31, text=","
>>> QUOTE           line=208, pos=33, text="'"
>>> IDENTIFIER      line=208, pos=34, text="P"
>>> QUOTE           line=208, pos=35, text="'"
>>> RIGHT_BRACKET   line=208, pos=36, text="]"
>>> SEMICOLON       line=208, pos=37, text=";"
209     teacherCodes   := ['E', 'H', 'U'];
>>> IDENTIFIER      line=209, pos= 4, text="teacherCodes"
>>> COLON_EQUALS    line=209, pos=19, text=":="
>>> LEFT_BRACKET    line=209, pos=22, text="["
>>> QUOTE           line=209, pos=23, text="'"
>>> IDENTIFIER      line=209, pos=24, text="E"
>>> QUOTE           line=209, pos=25, text="'"
>>> COMMA           line=209, pos=26, text=","
>>> QUOTE           line=209, pos=28, text="'"
>>> IDENTIFIER      line=209, pos=29, text="H"
>>> QUOTE           line=209, pos=30, text="'"
>>> COMMA           line=209, pos=31, text=","
>>> QUOTE           line=209, pos=33, text="'"
>>> IDENTIFIER      line=209, pos=34, text="U"
>>> QUOTE           line=209, pos=35, text="'"
>>> RIGHT_BRACKET   line=209, pos=36, text="]"
>>> SEMICOLON       line=209, pos=37, text=";"
210 
211     readEmployees;
>>> IDENTIFIER      line=211, pos= 4, text="readEmployees"
>>> SEMICOLON       line=211, pos=17, text=";"
212     sortEmployees;
>>> IDENTIFIER      line=212, pos= 4, text="sortEmployees"
>>> SEMICOLON       line=212, pos=17, text=";"
213     printEmployees;
>>> IDENTIFIER      line=213, pos= 4, text="printEmployees"
>>> SEMICOLON       line=213, pos=18, text=";"
214 
215     checkForExtras;
>>> IDENTIFIER      line=215, pos= 4, text="checkForExtras"
>>> SEMICOLON       line=215, pos=18, text=";"

                 215 source lines.
                  25 syntax errors.
                0.01 seconds total parsing time.

                   0 instructions generated.
                0.00 seconds total code generation time.
