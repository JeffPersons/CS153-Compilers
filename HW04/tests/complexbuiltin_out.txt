./Chapter12cpp execute -ix tests/ComplexBuiltIn.pas
001 PROGRAM ComplexBuiltIn;
002 
003 TYPE
004     mystring = ARRAY[1..3] OF char;
005 
006 VAR
007     x, y, z : complex;
008     
009 PROCEDURE print(expr : mystring; VAR z : complex);
010     BEGIN
011         write(expr, ' = (', z.re:0:5, ', ', z.im:0:5, ') ');
012     END;
013 
014 BEGIN {ComplexTest}
015     x.re := 3; x.im := 2;  print('  x', x);
016     y.re := 8; y.im := -5; print('  y', y);
017     z := x + y;            print('x+y', z);
018     writeln;
019 
020     print('  x', x);
021     print('  y', y);
022     z := x - y; print('x-y', z);
023     writeln;
024     
025     x.re := 4; x.im := -2; print('  x', x);
026     y.re := 1; y.im := -5; print('  y', y);
027     z := x*y;              print('x*y', z);
028     writeln;
029 
030     x.re := -3; x.im := 2;  print('  x', x);
031     y.re := 3;  y.im := -6; print('  y', y);
032     z := x/y;               print('x/y', z);
033     writeln;
034     
035     x.re := 5; x.im := 0; print('  x', x);
036     y.re := 3; y.im := 2; print('  y', y);
037     z := x + y;           print('x+y', z);
038     writeln;
039     
040     x.re := 5; x.im := 4; print('  x', x);
041     y.re := 2; y.im := 0; print('  y', y);
042     z := x*y;             print('x*y', z);
043     writeln;
044     
045     x.re := -2; x.im := -4; print('  x', x);
046     y.re := 0;  y.im :=  1; print('  y', y);
047     z := x/y;               print('x/y', z);
048     writeln;
049 END {ComplexTest}.

                  49 source lines.
                   0 syntax errors.
                0.00 seconds total parsing time.

===== CROSS-REFERENCE TABLE =====

*** PROGRAM complexbuiltin ***

Identifier       Line numbers    Type specification
----------       ------------    ------------------
mystring         004 009
                                 Defined as: type
                                 Scope nesting level: 1
                                 Type form = array, Type id = mystring
                                 --- INDEX TYPE ---
                                 Type form = subrange, Type id = <unnamed>
                                 --- Base type ---
                                 Type form = scalar, Type id = integer
                                 Range = 1..3
                                 --- ELEMENT TYPE ---
                                 Type form = scalar, Type id = char
                                 3 elements
print           
                                 Defined as: PROCEDURE
                                 Scope nesting level: 1
x                007 015 015 015 017 020 022 025 025 025 027 030 030 030 032 035 035 035 037 040 040 040 042 045 045 045 047
                                 Defined as: variable
                                 Scope nesting level: 1
                                 Type form = record, Type id = complex
y                007 016 016 016 017 021 022 026 026 026 027 031 031 031 032 036 036 036 037 041 041 041 042 046 046 046 047
                                 Defined as: variable
                                 Scope nesting level: 1
                                 Type form = record, Type id = complex
z                007 017 017 022 022 027 027 032 032 037 037 042 042 047 047
                                 Defined as: variable
                                 Scope nesting level: 1
                                 Type form = record, Type id = complex

*** PROCEDURE print ***

Identifier       Line numbers    Type specification
----------       ------------    ------------------
expr             009 011
                                 Defined as: value parameter
                                 Scope nesting level: 2
                                 Type form = array, Type id = mystring
z                009 011 011
                                 Defined as: VAR parameter
                                 Scope nesting level: 2
                                 Type form = record, Type id = complex

===== INTERMEDIATE CODE =====

*** PROGRAM complexbuiltin ***

<COMPOUND line="14">
    <ASSIGN line="15" type_id="real">
        <VARIABLE id="x" level="1" type_id="real">
            <FIELD id="re" level="1" type_id="real" />
        </VARIABLE>
        <INTEGER_CONSTANT value="3" type_id="integer" />
    </ASSIGN>
    <ASSIGN line="15" type_id="real">
        <VARIABLE id="x" level="1" type_id="real">
            <FIELD id="im" level="1" type_id="real" />
        </VARIABLE>
        <INTEGER_CONSTANT value="2" type_id="integer" />
    </ASSIGN>
    <CALL line="15" id="print" level="1">
        <PARAMETERS>
            <STRING_CONSTANT value="  x" type_id="$anon_7f1f38f4" />
            <VARIABLE id="x" level="1" type_id="complex" />
        </PARAMETERS>
    </CALL>
    <ASSIGN line="16" type_id="real">
        <VARIABLE id="y" level="1" type_id="real">
            <FIELD id="re" level="1" type_id="real" />
        </VARIABLE>
        <INTEGER_CONSTANT value="8" type_id="integer" />
    </ASSIGN>
    <ASSIGN line="16" type_id="real">
        <VARIABLE id="y" level="1" type_id="real">
            <FIELD id="im" level="1" type_id="real" />
        </VARIABLE>
        <NEGATE type_id="integer">
            <INTEGER_CONSTANT value="5" type_id="integer" />
        </NEGATE>
    </ASSIGN>
    <CALL line="16" id="print" level="1">
        <PARAMETERS>
            <STRING_CONSTANT value="  y" type_id="$anon_7f1f4a74" />
            <VARIABLE id="y" level="1" type_id="complex" />
        </PARAMETERS>
    </CALL>
    <ASSIGN line="17" type_id="complex">
        <VARIABLE id="z" level="1" type_id="complex" />
        <ADD type_id="complex">
            <VARIABLE id="x" level="1" type_id="complex" />
            <VARIABLE id="y" level="1" type_id="complex" />
        </ADD>
    </ASSIGN>
    <CALL line="17" id="print" level="1">
        <PARAMETERS>
makefile:112: recipe for target 'execute' failed
